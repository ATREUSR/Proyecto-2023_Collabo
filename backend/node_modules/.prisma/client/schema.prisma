// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String
  password  String
  profile   Profile?
  loops     Loops[]
  comment   Comment[]
  downloads Download[]
}

model Profile {
  id     Int    @id @default(autoincrement())
  bio    String
  user   User   @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model Loops {
  id          String     @id
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  Title       String
  Name        String?
  Descripcion String
  Tags        String[]
  comments    Comment[]
  downloads   Download[]
}

model Comment {
  id          Int      @id @default(autoincrement())
  loopId      String
  userId      Int
  commentText String
  createdAt   DateTime @default(now())
  loop        Loops    @relation(fields: [loopId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Download {
  id        Int      @id @default(autoincrement())
  userId    Int
  loopId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  loop      Loops    @relation(fields: [loopId], references: [id])

  @@unique([userId, loopId]) // Para evitar descargas duplicadas por el mismo usuario
}
